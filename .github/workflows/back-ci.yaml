name: CI/CD
on:
  push:
    paths:
      - "backend/**"
  workflow_dispatch:

jobs:
  backend-CI:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - environment: dev
            s3_bucket: ${{ secrets.AWS_S3_DEV_BUCKET_NAME }}
            codedeploy_app: ${{ secrets.AWS_CODEDEPLOY_DEV_APP_NAME }}
            codedeploy_group: ${{ secrets.AWS_CODEDEPLOY_DEV_GROUP_NAME }}
            docker_image: ccabi/cabi-dev
          - environment: main
            s3_bucket: ${{ secrets.AWS_S3_MAIN_BUCKET_NAME }}
            codedeploy_app: ${{ secrets.AWS_CODEDEPLOY_MAIN_APP_NAME }}
            codedeploy_group: ${{ secrets.AWS_CODEDEPLOY_MAIN_GROUP_NAME }}
            docker_image: ccabi/cabi-main

    steps:
      - name: 체크아웃
        uses: actions/checkout@v3

      - name: JDK 11 설정
        uses: actions/setup-java@v3
        with:
          java-version: "11"
          distribution: "corretto"

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Gradle 빌드
        run: |
          cd backend
          mkdir -p build/generated-snippets/
          chmod +x gradlew
          ./gradlew build -x test
        shell: bash

      - name: Log in to Docker Hub
        if: ${{ github.ref == 'refs/heads/' + matrix.environment }}
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata (tags, labels) for Docker
        if: ${{ github.ref == 'refs/heads/' + matrix.environment }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ matrix.docker_image }}
          flavor: |
            latest=true

      - name: Build and push Docker image
        if: ${{ github.ref == 'refs/heads/' + matrix.environment }}
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deploy-${{ matrix.environment }}/pinpoint-application/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Configure AWS credentials
        if: ${{ github.ref == 'refs/heads/' + matrix.environment }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3 and deploy
        if: ${{ github.ref == 'refs/heads/' + matrix.environment }}
        run: |
          env_file="deploy-${{ matrix.environment }}/pinpoint-application/.env"
          agent_env_file="deploy-${{ matrix.environment }}/pinpoint-agent/.env"
          echo "${{ secrets['PINPOINT_APPLICATION_' + matrix.environment + '_ENV'] }}" | base64 --decode > $env_file
          echo "${{ secrets['PINPOINT_AGENT_' + matrix.environment + '_ENV'] }}" | base64 --decode > $agent_env_file

          mkdir -p deploy && cp -r deploy-${{ matrix.environment }}/* deploy/
          zip -r deploy.zip deploy

          aws s3 cp deploy.zip s3://${{ matrix.s3_bucket }}/deploy.zip

          aws deploy create-deployment \
            --application-name ${{ matrix.codedeploy_app }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ matrix.codedeploy_group }} \
            --file-exists-behavior OVERWRITE \
            --s3-location bucket=${{ matrix.s3_bucket }},bundleType=zip,key=deploy.zip
